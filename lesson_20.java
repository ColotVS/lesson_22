public class lesson_20 {
    //Интерфейсы

    //Интерфейс очень напоминает абстрактный класс, у которого все методы абстрактные.
    //Он объявляется так же, как и класс, только используется ключевое слово interface.

    //1) Вместо слова class пишем interface.
    //2) Содержит только абстрактные методы (слово abstract писать не нужно).
    //3) На самом деле у интерфейсов все методы — public.

    //Интерфейс может наследоваться только от интерфейсов.
    //Интерфейсов-родителей может быть много.

    //Класс может наследоваться от нескольких интерфейсов (и только от одного класса).
    //При этом используется ключевое слово implements.


    //У интерфейсов есть два сильных преимущества по сравнению с классами:

    //1) Отделение «описания методов» от их реализации.

    //Если ты хочешь разрешить вызывать методы своего класса из других классов, то их нужно пометить ключевым словом public.
    //Если же хочешь, чтобы какие-то методы можно было вызывать только из твоего же класса, их нужно помечать ключевым словом private.
    //Другими словами мы делим методы класса на две категории: «для всех» и «только для своих».

    //С помощью интерфейсов, это деление можно усилить еще больше.
    //Мы сделаем специальный «класс для всех»,
    //и второй «класс для своих», который унаследуем от первого.

    //Мы разбили наш класс на два: интерфейс и класс, унаследованный от интерфейса.

    //Один и тот же интерфейс могут реализовывать (наследовать) различные классы. И у каждого может быть свое собственное поведение.
    //Так же как ArrayList и LinkedList – это две различные реализации интерфейса List.

    //Таким образом, мы скрываем не только различные реализации, но и даже сам класс, который ее содержит
    //(везде в коде может фигурировать только интерфейс).
    //Это позволяет очень гибко, прямо в процессе исполнения программы, подменять одни объекты на другие,
    //меняя поведение объекта скрытно от всех классов, которые его используют.

    //2) Множественное наследование.
    //В Java все классы могут иметь только одного класса-родителя.
    //В других языках программирования, классы часто могут иметь несколько классов-родителей.
    //Это очень удобно, но приносит так же много проблем.

    //В Java пришли к компромиссу – запретили множественное наследование классов,
    //но разрешили множественное наследование интерфейсов.
    //Интерфейс может иметь несколько интерфейсов-родителей.
    //Класс может иметь несколько интерфейсов-родителей и только один класс-родитель.


}
