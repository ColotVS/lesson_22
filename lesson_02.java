public class lesson_02 {
    //Приведение типов.
    //Тут есть еще более интересный момент. Т.к. класс при наследовании получает все методы и данные класса родителя,
    //то объект этого класса разрешается сохранять (присваивать)
    //в переменные класса родителя (и родителя родителя, и т.д., вплоть до Object).

    //Пример:

    //public static void main(String[] args) {  //На экран будет выведена надпись Я – белая
    //  Whale whale = new Whale();
    //  whale.printColor();
    //}

    //public static void main(String[] args) {  //На экран будет выведена надпись Я – белая
    //  Cow cow = new Whale();
    //  cow.printColor();
    //}

    //public static void main(String[] args) {  //На экран будет выведена надпись Whale@da435a Метод toString() унаследован от класса Object.
    //  Object o = new Whale();
    //  System.out.println(o.toString());
    //}


    //Вызов метода объекта (динамическая диспетчеризация методов).

    //public static void main(String[] args) {  //На экран будет выведена надпись Я – кит.
    //  Whale whale = new Whale();
    //  whale.printName();
    //}

    //public static void main(String[] args) {  //На экран будет выведена надпись Я – кит.
    //  Cow cow = new Whale();
    //  cow.printName();
    //}

    //Обрати внимание, что на то, какой именно метод printName вызовется, от класса Cow или Whale,
    //влияет не тип переменной, а тип – объекта, на который она ссылается.
    //В переменной типа Cow сохранена ссылка на объект типа Whale, и будет вызван метод printName, описанный в классе Whale.

    //Набор методов, которые можно вызвать у переменной, определяется типом переменной.
    //А какой именно метод/какая реализация вызовется, определяется типом/классом объекта, ссылку на который хранит переменная.

    //Расширение и сужение типов.
    //Для ссылочных типов, т.е. классов, приведение типов работает не так, как для примитивных типов.
    //Хотя у ссылочных типов тоже есть расширение и сужение типа.

    //Пример:

    //Расширение типа
    //Cow cow = new Whale();        //Классическое расширение типа.
    //                              Теперь кита обобщили (расширили) до коровы, но у объекта типа Whale
    //                              можно вызывать только методы, описанные в классе Cow.
    //                              Компилятор разрешит вызвать у переменной cow только те методы,
    //                              которые есть у ее типа — класса Cow.

    //Сужение типа
    //Cow cow = new Whale();        //Классическое сужение типа с проверкой.
    //if (cow instanceof Whale) {   Переменная cow типа Cow, хранит ссылку на объект класса Whale.
    //  Whale whale = (Whale) cow;  Мы проверяем, что это так и есть, и затем выполняем операцию преобразования (сужения) типа.
    //}                             Или как ее еще называют – downcast.

    //Cow cow = new Cow();
    //Whale whale = (Whale) cow; //exception
    //Ссылочное сужение типа можно провести и без проверки типа объекта.
    //При этом, если в переменной cow хранился объект не класса Whale,
    //будет сгенерировано исключение – InvalidClassCastException.

    //Вызов оригинального метода
    //Иногда тебе хочется не заменить унаследованный метод на свой при переопределении метода,
    //а лишь немного дополнить его.
    //В этом случае очень хочется исполнить в новом методе свой код и вызвать этот же метод, но базового класса.
    //И такая возможность в Java есть.
    //Делается это так: super.method().

    //class Cow {
    //  public void printAll() {
    //    printColor();
    //    printName();
    //  }
    //
    //  public void printColor() {
    //    System.out.println("Я – белый");
    //  }
    //
    //  public void printName() {
    //    System.out.println("Я – корова");
    //  }
    //}
    //
    //class Whale extends Cow {
    //  public void printName() {
    //    System.out.print("Это неправда: ");
    //    super.printName();
    //
    //    System.out.println("Я – кит");
    //  }
    //}

    //public static void main(String[] args){
    //  Whale whale = new Whale();
    //  whale.printAll();
    //}

    //На экран будет выведена надпись
    //Я – белый
    //Это неправда: Я – корова
    //Я – кит



}
